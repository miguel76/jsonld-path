/* From XML Namespaces 1.1 */
QName = PrefixedName / UnprefixedName
PrefixedName = Prefix ':' LocalPart
UnprefixedName = LocalPart
Prefix = NCName
LocalPart	= NCName
NCName = NCNameStartChar NCNameChar*	/* An XML Name, minus the ":" */

/* From XML 1.1 */
NameStartChar	= ":" / [A-Z] / "_" / [a-z] / [\xC0-\xD6] / [\xD8-\xF6]
  / [\xF8-\u02FF] / [\u0370-\u037D] / [\u037F-\u1FFF] / [\u200C-\u200D]
  / [\u2070-\u218F] / [\u2C00-\u2FEF] / [\u3001-\uD7FF] / [\uF900-\uFDCF]
  / [\uFDF0-\uFFFD] / [\u10000-\uEFFFF]
NameChar = NameStartChar / "-" / "." / [0-9] / [\xB7] / [\u0300-\u036F]
  / [\u203F-\u2040]
Char = [\x01-\uD7FF] / [\uE000-\uFFFD] / [\u10000-\u10FFFF]
  /* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */

/* Combining XML 1.1 and XML Namespaces 1.1 */
NCNameStartChar	= [A-Z] / "_" / [a-z] / [\xC0-\xD6] / [\xD8-\xF6]
  / [\xF8-\u02FF] / [\u0370-\u037D] / [\u037F-\u1FFF] / [\u200C-\u200D]
  / [\u2070-\u218F] / [\u2C00-\u2FEF] / [\u3001-\uD7FF] / [\uF900-\uFDCF]
  / [\uFDF0-\uFFFD] / [\u10000-\uEFFFF]
NCNameChar = NCNameStartChar / "-" / "." / [0-9] / [\xB7] / [\u0300-\u036F]
  / [\u203F-\u2040

IntegerLiteral = Digits { return Number(text()); }
DecimalLiteral = ("." Digits) / (Digits "." [0-9]*)	{ return Number(text()); }
DoubleLiteral = (("." Digits) / (Digits ("." [0-9]*)?)) [eE] [+-]? Digits	{ return Number(text()); }
StringLiteral = ('"' (EscapeQuot / [^"])* '"') / ("'" (EscapeApos / [^'])* "'")	{ return text(); }
URIQualifiedName = BracedURILiteral NCName	/* ws: explicit */
BracedURILiteral = "Q" "{" [^{}]* "}"	/* ws: explicit */
EscapeQuot = '""'
EscapeApos = "''"
Comment = "(:" (CommentContents / Comment)* ":)"	/* ws: explicit */
Digits = [0-9]+
CommentContents = ([^(:]/'('[^:]/':'[^)])*.

XPath = Expr
ParamList = Param ("," Param)*
Param = "$" EQName TypeDeclaration?
FunctionBody = EnclosedExpr
EnclosedExpr = "{" Expr? "}"
Expr = ExprSingle ("," ExprSingle)*
ExprSingle = ForExpr
/ LetExpr
/ QuantifiedExpr
/ IfExpr
/ OrExpr
ForExpr = SimpleForClause "return" ExprSingle
SimpleForClause = "for" SimpleForBinding ("," SimpleForBinding)*
SimpleForBinding = "$" VarName "in" ExprSingle
LetExpr = SimpleLetClause "return" ExprSingle
SimpleLetClause = "let" SimpleLetBinding ("," SimpleLetBinding)*
SimpleLetBinding = "$" VarName ":=" ExprSingle
QuantifiedExpr = ("some" / "every") "$" VarName "in" ExprSingle ("," "$" VarName "in" ExprSingle)* "satisfies" ExprSingle
IfExpr = "if" "(" Expr ")" "then" ExprSingle "else" ExprSingle
OrExpr = AndExpr ( "or" AndExpr )*
AndExpr = ComparisonExpr ( "and" ComparisonExpr )*
ComparisonExpr = StringConcatExpr ( (ValueComp
/ GeneralComp
/ NodeComp) StringConcatExpr )?
StringConcatExpr = RangeExpr ( "||" RangeExpr )*
RangeExpr = AdditiveExpr ( "to" AdditiveExpr )?
AdditiveExpr = MultiplicativeExpr ( ("+" / "-") MultiplicativeExpr )*
MultiplicativeExpr = UnionExpr ( ("*" / "div" / "idiv" / "mod") UnionExpr )*
UnionExpr = IntersectExceptExpr ( ("union" / "|") IntersectExceptExpr )*
IntersectExceptExpr = InstanceofExpr ( ("intersect" / "except") InstanceofExpr )*
InstanceofExpr = TreatExpr ( "instance" "of" SequenceType )?
TreatExpr = CastableExpr ( "treat" "as" SequenceType )?
CastableExpr = CastExpr ( "castable" "as" SingleType )?
CastExpr = ArrowExpr ( "cast" "as" SingleType )?
ArrowExpr = UnaryExpr ( "=>" ArrowFunctionSpecifier ArgumentList )*
UnaryExpr = ("-" / "+")* ValueExpr
ValueExpr = SimpleMapExpr
GeneralComp = "=" / "!=" / "<" / "<=" / ">" / ">="
ValueComp = "eq" / "ne" / "lt" / "le" / "gt" / "ge"
NodeComp = "is" / "<<" / ">>"
SimpleMapExpr = PathExpr ("!" PathExpr)*
PathExpr = ("/" RelativePathExpr?)
/ ("//" RelativePathExpr)
/ RelativePathExpr	/* xgc: leading-lone-slash */
RelativePathExpr = StepExpr (("/" / "//") StepExpr)*
StepExpr = PostfixExpr / AxisStep
AxisStep = (ReverseStep / ForwardStep) PredicateList
ForwardStep = (ForwardAxis NodeTest) / AbbrevForwardStep
ForwardAxis = ("child" "::")
/ ("descendant" "::")
/ ("attribute" "::")
/ ("self" "::")
/ ("descendant-or-self" "::")
/ ("following-sibling" "::")
/ ("following" "::")
/ ("namespace" "::")
AbbrevForwardStep = "@"? NodeTest
ReverseStep = (ReverseAxis NodeTest) / AbbrevReverseStep
ReverseAxis = ("parent" "::")
/ ("ancestor" "::")
/ ("preceding-sibling" "::")
/ ("preceding" "::")
/ ("ancestor-or-self" "::")
AbbrevReverseStep = ".."
NodeTest = KindTest / NameTest
NameTest = EQName / Wildcard
Wildcard = "*"
/ (NCName ":" "*")
/ ("*" ":" NCName)
/ (BracedURILiteral "*")	/* ws: explicit */
PostfixExpr = PrimaryExpr (Predicate / ArgumentList / Lookup)*
ArgumentList = "(" (Argument ("," Argument)*)? ")"
PredicateList = Predicate*
Predicate = "[" Expr "]"
Lookup = "?" KeySpecifier
KeySpecifier = NCName / IntegerLiteral / ParenthesizedExpr / "*"
ArrowFunctionSpecifier = EQName / VarRef / ParenthesizedExpr
PrimaryExpr = Literal
/ VarRef
/ ParenthesizedExpr
/ ContextItemExpr
/ FunctionCall
/ FunctionItemExpr
/ MapConstructor
/ ArrayConstructor
/ UnaryLookup
Literal = NumericLiteral / StringLiteral
NumericLiteral = IntegerLiteral / DecimalLiteral / DoubleLiteral
VarRef = "$" VarName
VarName = EQName
ParenthesizedExpr = "(" Expr? ")"
ContextItemExpr = "."
FunctionCall = EQName ArgumentList	/* xgc: reserved-function-names */
/* gn: parens */
Argument = ExprSingle / ArgumentPlaceholder
ArgumentPlaceholder = "?"
FunctionItemExpr = NamedFunctionRef / InlineFunctionExpr
NamedFunctionRef = EQName "#" IntegerLiteral	/* xgc: reserved-function-names */
InlineFunctionExpr = "function" "(" ParamList? ")" ("as" SequenceType)? FunctionBody
MapConstructor = "map" "{" (MapConstructorEntry ("," MapConstructorEntry)*)? "}"
MapConstructorEntry = MapKeyExpr ":" MapValueExpr
MapKeyExpr = ExprSingle
MapValueExpr = ExprSingle
ArrayConstructor = SquareArrayConstructor / CurlyArrayConstructor
SquareArrayConstructor = "[" (ExprSingle ("," ExprSingle)*)? "]"
CurlyArrayConstructor = "array" "{" Expr? "}"
UnaryLookup = "?" KeySpecifier
SingleType = SimpleTypeName "?"?
TypeDeclaration = "as" SequenceType
SequenceType = ("empty-sequence" "(" ")")
/ (ItemType OccurrenceIndicator?)
OccurrenceIndicator = "?" / "*" / "+"	/* xgc: occurrence-indicators */
ItemType = KindTest / ("item" "(" ")") / FunctionTest / MapTest / ArrayTest / AtomicOrUnionType / ParenthesizedItemType
AtomicOrUnionType = EQName
KindTest = DocumentTest
/ ElementTest
/ AttributeTest
/ SchemaElementTest
/ SchemaAttributeTest
/ PITest
/ CommentTest
/ TextTest
/ NamespaceNodeTest
/ AnyKindTest
AnyKindTest = "node" "(" ")"
DocumentTest = "document-node" "(" (ElementTest / SchemaElementTest)? ")"
TextTest = "text" "(" ")"
CommentTest = "comment" "(" ")"
NamespaceNodeTest = "namespace-node" "(" ")"
PITest = "processing-instruction" "(" (NCName / StringLiteral)? ")"
AttributeTest = "attribute" "(" (AttribNameOrWildcard ("," TypeName)?)? ")"
AttribNameOrWildcard = AttributeName / "*"
SchemaAttributeTest = "schema-attribute" "(" AttributeDeclaration ")"
AttributeDeclaration = AttributeName
ElementTest = "element" "(" (ElementNameOrWildcard ("," TypeName "?"?)?)? ")"
ElementNameOrWildcard = ElementName / "*"
SchemaElementTest = "schema-element" "(" ElementDeclaration ")"
ElementDeclaration = ElementName
AttributeName = EQName
ElementName = EQName
SimpleTypeName = TypeName
TypeName = EQName
FunctionTest = AnyFunctionTest
/ TypedFunctionTest
AnyFunctionTest = "function" "(" "*" ")"
TypedFunctionTest = "function" "(" (SequenceType ("," SequenceType)*)? ")" "as" SequenceType
MapTest = AnyMapTest / TypedMapTest
AnyMapTest = "map" "(" "*" ")"
TypedMapTest = "map" "(" AtomicOrUnionType "," SequenceType ")"
ArrayTest = AnyArrayTest / TypedArrayTest
AnyArrayTest = "array" "(" "*" ")"
TypedArrayTest = "array" "(" SequenceType ")"
ParenthesizedItemType = "(" ItemType ")"
EQName = QName / URIQualifiedName
